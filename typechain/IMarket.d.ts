/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMarketInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Ask(address,uint256,address,uint256,tuple[],uint256)": EventFragment;
    "CancelSellToken(address,uint256)": EventFragment;
    "FeeAddressTransferred(address,address)": EventFragment;
    "SetMakerFeePercent(address,uint256,uint256)": EventFragment;
    "SetTakerFeeFeePercent(address,uint256,uint256)": EventFragment;
    "Trade(address,address,uint256,bool,string,uint256,uint256,uint256)": EventFragment;
    "setPrices(address,uint256,uint256,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Ask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSellToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeAddressTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMakerFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTakerFeeFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setPrices"): EventFragment;
}

export type AskEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    ([string, BigNumber] & { symbol: string; price: BigNumber })[],
    BigNumber
  ] & {
    seller: string;
    order: BigNumber;
    NFTAddress: string;
    ethPrice: BigNumber;
    tokenPrices: ([string, BigNumber] & { symbol: string; price: BigNumber })[];
    fee: BigNumber;
  }
>;

export type CancelSellTokenEvent = TypedEvent<
  [string, BigNumber] & { seller: string; order: BigNumber }
>;

export type FeeAddressTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetMakerFeePercentEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    setBy: string;
    oldFeePercent: BigNumber;
    newFeePercent: BigNumber;
  }
>;

export type SetTakerFeeFeePercentEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    setBy: string;
    oldFeePercent: BigNumber;
    newFeePercent: BigNumber;
  }
>;

export type TradeEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    seller: string;
    buyer: string;
    tokenId: BigNumber;
    byToken: boolean;
    symbol: string;
    quantity: BigNumber;
    price: BigNumber;
    fee: BigNumber;
  }
>;

export type setPricesEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    ([string, BigNumber] & { symbol: string; price: BigNumber })[]
  ] & {
    seller: string;
    order: BigNumber;
    ethPrice: BigNumber;
    tokenPrices: ([string, BigNumber] & { symbol: string; price: BigNumber })[];
  }
>;

export class IMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMarketInterface;

  functions: {};

  callStatic: {};

  filters: {
    "Ask(address,uint256,address,uint256,tuple[],uint256)"(
      seller?: null,
      order?: null,
      NFTAddress?: null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[],
        BigNumber
      ],
      {
        seller: string;
        order: BigNumber;
        NFTAddress: string;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
        fee: BigNumber;
      }
    >;

    Ask(
      seller?: null,
      order?: null,
      NFTAddress?: null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[],
        BigNumber
      ],
      {
        seller: string;
        order: BigNumber;
        NFTAddress: string;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
        fee: BigNumber;
      }
    >;

    "CancelSellToken(address,uint256)"(
      seller?: string | null,
      order?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; order: BigNumber }
    >;

    CancelSellToken(
      seller?: string | null,
      order?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; order: BigNumber }
    >;

    "FeeAddressTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    FeeAddressTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetMakerFeePercent(address,uint256,uint256)"(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    SetMakerFeePercent(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    "SetTakerFeeFeePercent(address,uint256,uint256)"(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    SetTakerFeeFeePercent(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    "Trade(address,address,uint256,bool,string,uint256,uint256,uint256)"(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: null,
      byToken?: null,
      symbol?: null,
      quantity?: null,
      price?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        seller: string;
        buyer: string;
        tokenId: BigNumber;
        byToken: boolean;
        symbol: string;
        quantity: BigNumber;
        price: BigNumber;
        fee: BigNumber;
      }
    >;

    Trade(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: null,
      byToken?: null,
      symbol?: null,
      quantity?: null,
      price?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        seller: string;
        buyer: string;
        tokenId: BigNumber;
        byToken: boolean;
        symbol: string;
        quantity: BigNumber;
        price: BigNumber;
        fee: BigNumber;
      }
    >;

    "setPrices(address,uint256,uint256,tuple[])"(
      seller?: string | null,
      order?: BigNumberish | null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[]
      ],
      {
        seller: string;
        order: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
      }
    >;

    setPrices(
      seller?: string | null,
      order?: BigNumberish | null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[]
      ],
      {
        seller: string;
        order: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
