/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AuctionV2Interface extends ethers.utils.Interface {
  functions: {
    "MAXIMAL_DURATION()": FunctionFragment;
    "MMINIMAL_DURATION()": FunctionFragment;
    "PERCENTS_DIVIDER()": FunctionFragment;
    "PERCENT_DIVIDER()": FunctionFragment;
    "acepOffert(uint256)": FunctionFragment;
    "auctionIsActive(uint256)": FunctionFragment;
    "auctionIsInfinity(uint256)": FunctionFragment;
    "auctionIsOver(uint256)": FunctionFragment;
    "auctionStarted(uint256)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "bid(uint256,uint256)": FunctionFragment;
    "createAuctionSingle(address,uint256[],uint256,uint256,bool)": FunctionFragment;
    "createAuctionTimeLong(address,uint256[],uint256,bool)": FunctionFragment;
    "currentOrder()": FunctionFragment;
    "feeAddr()": FunctionFragment;
    "finishAuction(uint256)": FunctionFragment;
    "getAllAuctions()": FunctionFragment;
    "getAllAuctionsID()": FunctionFragment;
    "getAllBuyerOrdersUser(address)": FunctionFragment;
    "getAllSellerOrdersUser(address)": FunctionFragment;
    "getAuctionByIndex(uint256)": FunctionFragment;
    "getAuctionLength()": FunctionFragment;
    "getBuyerOrderLength(address)": FunctionFragment;
    "getBuyerOrderUserByIndex(address,uint256)": FunctionFragment;
    "getSellerOrderLength(address)": FunctionFragment;
    "getSellerOrderUserByIndex(address,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeBit(uint256)": FunctionFragment;
    "removeOffer(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeTakerFee(uint256)": FunctionFragment;
    "takerFee()": FunctionFragment;
    "transferFeeAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAXIMAL_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MMINIMAL_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acepOffert",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionIsActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionIsInfinity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionIsOver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionStarted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuctionSingle",
    values: [string, BigNumberish[], BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuctionTimeLong",
    values: [string, BigNumberish[], BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentOrder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finishAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAuctionsID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBuyerOrdersUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSellerOrdersUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerOrderLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerOrderUserByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerOrderLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerOrderUserByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeBit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTakerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "takerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAXIMAL_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MMINIMAL_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acepOffert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionIsInfinity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionIsOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuctionSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuctionTimeLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuctionsID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBuyerOrdersUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSellerOrdersUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerOrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerOrderUserByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerOrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerOrderUserByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeBit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTakerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Ask(address,uint256,address,uint256,tuple[],uint256)": EventFragment;
    "AuctionCreated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "AuctionFinished(address,address,uint256,uint256,uint256)": EventFragment;
    "BidPlaced(address,uint256,uint256)": EventFragment;
    "CancelSellToken(address,uint256)": EventFragment;
    "FeeAddressTransferred(address,address)": EventFragment;
    "IncrementBid(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SetMakerFeePercent(address,uint256,uint256)": EventFragment;
    "SetTakerFeeFeePercent(address,uint256,uint256)": EventFragment;
    "Trade(address,address,uint256,bool,string,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "setPrices(address,uint256,uint256,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Ask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSellToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeAddressTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncrementBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMakerFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTakerFeeFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setPrices"): EventFragment;
}

export type AskEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    ([string, BigNumber] & { symbol: string; price: BigNumber })[],
    BigNumber
  ] & {
    seller: string;
    order: BigNumber;
    NFTAddress: string;
    ethPrice: BigNumber;
    tokenPrices: ([string, BigNumber] & { symbol: string; price: BigNumber })[];
    fee: BigNumber;
  }
>;

export type AuctionCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    seller: string;
    id: BigNumber;
    _tokenId: BigNumber;
    _price: BigNumber;
    _duration: BigNumber;
  }
>;

export type AuctionFinishedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    seller: string;
    winner: string;
    id: BigNumber;
    _tokenId: BigNumber;
    _price: BigNumber;
  }
>;

export type BidPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    bidder: string;
    id: BigNumber;
    _price: BigNumber;
  }
>;

export type CancelSellTokenEvent = TypedEvent<
  [string, BigNumber] & { seller: string; order: BigNumber }
>;

export type FeeAddressTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type IncrementBidEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    bidder: string;
    id: BigNumber;
    value: BigNumber;
    newPrice: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type SetMakerFeePercentEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    setBy: string;
    oldFeePercent: BigNumber;
    newFeePercent: BigNumber;
  }
>;

export type SetTakerFeeFeePercentEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    setBy: string;
    oldFeePercent: BigNumber;
    newFeePercent: BigNumber;
  }
>;

export type TradeEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    seller: string;
    buyer: string;
    tokenId: BigNumber;
    byToken: boolean;
    symbol: string;
    quantity: BigNumber;
    price: BigNumber;
    fee: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type setPricesEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    ([string, BigNumber] & { symbol: string; price: BigNumber })[]
  ] & {
    seller: string;
    order: BigNumber;
    ethPrice: BigNumber;
    tokenPrices: ([string, BigNumber] & { symbol: string; price: BigNumber })[];
  }
>;

export class AuctionV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AuctionV2Interface;

  functions: {
    MAXIMAL_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MMINIMAL_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    acepOffert(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionIsActive(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctionIsInfinity(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctionIsOver(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctionStarted(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        boolean,
        boolean
      ] & {
        NFTAddress: string;
        tokenId: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        initPrice: BigNumber;
        currentPrice: BigNumber;
        byToken: boolean;
        bestBidder: string;
        seller: string;
        orderId: BigNumber;
        _isInfinity: boolean;
        finish: boolean;
      }
    >;

    bid(
      _order: BigNumberish,
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAuctionSingle(
      nft: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish,
      _duration: BigNumberish,
      _byToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAuctionTimeLong(
      nft: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish,
      _byToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentOrder(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeAddr(overrides?: CallOverrides): Promise<[string]>;

    finishAuction(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllAuctions(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          string,
          string,
          BigNumber,
          boolean,
          boolean
        ] & {
          NFTAddress: string;
          tokenId: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          initPrice: BigNumber;
          currentPrice: BigNumber;
          byToken: boolean;
          bestBidder: string;
          seller: string;
          orderId: BigNumber;
          _isInfinity: boolean;
          finish: boolean;
        })[]
      ]
    >;

    getAllAuctionsID(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getAllBuyerOrdersUser(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAllSellerOrdersUser(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAuctionByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuctionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBuyerOrderLength(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyerOrderUserByIndex(
      buyer: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellerOrderLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellerOrderUserByIndex(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeBit(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOffer(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeTakerFee(
      _takerPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFeeAddress(
      _feeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAXIMAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MMINIMAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  acepOffert(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionIsActive(
    _order: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctionIsInfinity(
    _order: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctionIsOver(
    _order: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctionStarted(
    _order: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      BigNumber,
      boolean,
      boolean
    ] & {
      NFTAddress: string;
      tokenId: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      initPrice: BigNumber;
      currentPrice: BigNumber;
      byToken: boolean;
      bestBidder: string;
      seller: string;
      orderId: BigNumber;
      _isInfinity: boolean;
      finish: boolean;
    }
  >;

  bid(
    _order: BigNumberish,
    _tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAuctionSingle(
    nft: string,
    _tokenId: BigNumberish[],
    _price: BigNumberish,
    _duration: BigNumberish,
    _byToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAuctionTimeLong(
    nft: string,
    _tokenId: BigNumberish[],
    _price: BigNumberish,
    _byToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentOrder(overrides?: CallOverrides): Promise<BigNumber>;

  feeAddr(overrides?: CallOverrides): Promise<string>;

  finishAuction(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllAuctions(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string,
      string,
      BigNumber,
      boolean,
      boolean
    ] & {
      NFTAddress: string;
      tokenId: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      initPrice: BigNumber;
      currentPrice: BigNumber;
      byToken: boolean;
      bestBidder: string;
      seller: string;
      orderId: BigNumber;
      _isInfinity: boolean;
      finish: boolean;
    })[]
  >;

  getAllAuctionsID(overrides?: CallOverrides): Promise<BigNumber[]>;

  getAllBuyerOrdersUser(
    buyer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAllSellerOrdersUser(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAuctionByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

  getBuyerOrderLength(
    buyer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyerOrderUserByIndex(
    buyer: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellerOrderLength(
    seller: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellerOrderUserByIndex(
    seller: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeBit(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOffer(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeTakerFee(
    _takerPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takerFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferFeeAddress(
    _feeAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAXIMAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MMINIMAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    acepOffert(_order: BigNumberish, overrides?: CallOverrides): Promise<void>;

    auctionIsActive(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionIsInfinity(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionIsOver(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionStarted(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        boolean,
        boolean
      ] & {
        NFTAddress: string;
        tokenId: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        initPrice: BigNumber;
        currentPrice: BigNumber;
        byToken: boolean;
        bestBidder: string;
        seller: string;
        orderId: BigNumber;
        _isInfinity: boolean;
        finish: boolean;
      }
    >;

    bid(
      _order: BigNumberish,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuctionSingle(
      nft: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish,
      _duration: BigNumberish,
      _byToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuctionTimeLong(
      nft: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish,
      _byToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    currentOrder(overrides?: CallOverrides): Promise<BigNumber>;

    feeAddr(overrides?: CallOverrides): Promise<string>;

    finishAuction(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllAuctions(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string,
        string,
        BigNumber,
        boolean,
        boolean
      ] & {
        NFTAddress: string;
        tokenId: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        initPrice: BigNumber;
        currentPrice: BigNumber;
        byToken: boolean;
        bestBidder: string;
        seller: string;
        orderId: BigNumber;
        _isInfinity: boolean;
        finish: boolean;
      })[]
    >;

    getAllAuctionsID(overrides?: CallOverrides): Promise<BigNumber[]>;

    getAllBuyerOrdersUser(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAllSellerOrdersUser(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAuctionByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyerOrderLength(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerOrderUserByIndex(
      buyer: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerOrderLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerOrderUserByIndex(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeBit(_order: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeOffer(_order: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeTakerFee(
      _takerPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFeeAddress(
      _feeAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Ask(address,uint256,address,uint256,tuple[],uint256)"(
      seller?: null,
      order?: null,
      NFTAddress?: null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[],
        BigNumber
      ],
      {
        seller: string;
        order: BigNumber;
        NFTAddress: string;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
        fee: BigNumber;
      }
    >;

    Ask(
      seller?: null,
      order?: null,
      NFTAddress?: null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[],
        BigNumber
      ],
      {
        seller: string;
        order: BigNumber;
        NFTAddress: string;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
        fee: BigNumber;
      }
    >;

    "AuctionCreated(address,uint256,uint256,uint256,uint256)"(
      seller?: string | null,
      id?: null,
      _tokenId?: null,
      _price?: null,
      _duration?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        id: BigNumber;
        _tokenId: BigNumber;
        _price: BigNumber;
        _duration: BigNumber;
      }
    >;

    AuctionCreated(
      seller?: string | null,
      id?: null,
      _tokenId?: null,
      _price?: null,
      _duration?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        id: BigNumber;
        _tokenId: BigNumber;
        _price: BigNumber;
        _duration: BigNumber;
      }
    >;

    "AuctionFinished(address,address,uint256,uint256,uint256)"(
      seller?: string | null,
      winner?: string | null,
      id?: null,
      _tokenId?: null,
      _price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        winner: string;
        id: BigNumber;
        _tokenId: BigNumber;
        _price: BigNumber;
      }
    >;

    AuctionFinished(
      seller?: string | null,
      winner?: string | null,
      id?: null,
      _tokenId?: null,
      _price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        winner: string;
        id: BigNumber;
        _tokenId: BigNumber;
        _price: BigNumber;
      }
    >;

    "BidPlaced(address,uint256,uint256)"(
      bidder?: string | null,
      id?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { bidder: string; id: BigNumber; _price: BigNumber }
    >;

    BidPlaced(
      bidder?: string | null,
      id?: null,
      _price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { bidder: string; id: BigNumber; _price: BigNumber }
    >;

    "CancelSellToken(address,uint256)"(
      seller?: string | null,
      order?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; order: BigNumber }
    >;

    CancelSellToken(
      seller?: string | null,
      order?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; order: BigNumber }
    >;

    "FeeAddressTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    FeeAddressTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "IncrementBid(address,uint256,uint256,uint256)"(
      bidder?: string | null,
      id?: null,
      value?: null,
      newPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { bidder: string; id: BigNumber; value: BigNumber; newPrice: BigNumber }
    >;

    IncrementBid(
      bidder?: string | null,
      id?: null,
      value?: null,
      newPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { bidder: string; id: BigNumber; value: BigNumber; newPrice: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "SetMakerFeePercent(address,uint256,uint256)"(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    SetMakerFeePercent(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    "SetTakerFeeFeePercent(address,uint256,uint256)"(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    SetTakerFeeFeePercent(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    "Trade(address,address,uint256,bool,string,uint256,uint256,uint256)"(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: null,
      byToken?: null,
      symbol?: null,
      quantity?: null,
      price?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        seller: string;
        buyer: string;
        tokenId: BigNumber;
        byToken: boolean;
        symbol: string;
        quantity: BigNumber;
        price: BigNumber;
        fee: BigNumber;
      }
    >;

    Trade(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: null,
      byToken?: null,
      symbol?: null,
      quantity?: null,
      price?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        seller: string;
        buyer: string;
        tokenId: BigNumber;
        byToken: boolean;
        symbol: string;
        quantity: BigNumber;
        price: BigNumber;
        fee: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "setPrices(address,uint256,uint256,tuple[])"(
      seller?: string | null,
      order?: BigNumberish | null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[]
      ],
      {
        seller: string;
        order: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
      }
    >;

    setPrices(
      seller?: string | null,
      order?: BigNumberish | null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[]
      ],
      {
        seller: string;
        order: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
      }
    >;
  };

  estimateGas: {
    MAXIMAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MMINIMAL_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    acepOffert(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionIsActive(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionIsInfinity(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionIsOver(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionStarted(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      _order: BigNumberish,
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAuctionSingle(
      nft: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish,
      _duration: BigNumberish,
      _byToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAuctionTimeLong(
      nft: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish,
      _byToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentOrder(overrides?: CallOverrides): Promise<BigNumber>;

    feeAddr(overrides?: CallOverrides): Promise<BigNumber>;

    finishAuction(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAuctionsID(overrides?: CallOverrides): Promise<BigNumber>;

    getAllBuyerOrdersUser(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllSellerOrdersUser(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyerOrderLength(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerOrderUserByIndex(
      buyer: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerOrderLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerOrderUserByIndex(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeBit(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOffer(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeTakerFee(
      _takerPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFeeAddress(
      _feeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAXIMAL_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MMINIMAL_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acepOffert(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionIsActive(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionIsInfinity(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionIsOver(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionStarted(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      _order: BigNumberish,
      _tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAuctionSingle(
      nft: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish,
      _duration: BigNumberish,
      _byToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAuctionTimeLong(
      nft: string,
      _tokenId: BigNumberish[],
      _price: BigNumberish,
      _byToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentOrder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finishAuction(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllAuctionsID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllBuyerOrdersUser(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllSellerOrdersUser(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBuyerOrderLength(
      buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyerOrderUserByIndex(
      buyer: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerOrderLength(
      seller: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerOrderUserByIndex(
      seller: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBit(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOffer(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTakerFee(
      _takerPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFeeAddress(
      _feeAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
