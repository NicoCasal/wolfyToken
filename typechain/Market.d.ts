/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "PERCENTS_DIVIDER()": FunctionFragment;
    "buyToken(uint256,uint256)": FunctionFragment;
    "cancelSellToken(uint256)": FunctionFragment;
    "feeAddr()": FunctionFragment;
    "getAskLength()": FunctionFragment;
    "getAsks()": FunctionFragment;
    "getAsksByUser(address)": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "getOrderByIndex(uint256)": FunctionFragment;
    "makerFee()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "readyToSellToken(uint256[],uint256,uint256,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMakerFee(uint256)": FunctionFragment;
    "setTakerFee(uint256)": FunctionFragment;
    "takerFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PERCENTS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSellToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAskLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAsks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAsksByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "makerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readyToSellToken",
    values: [BigNumberish[], BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMakerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTakerFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "takerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERCENTS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSellToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAskLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAsksByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readyToSellToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMakerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTakerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Ask(address,uint256,address,uint256,tuple[],uint256)": EventFragment;
    "Buy(address,address,address,uint256,uint256)": EventFragment;
    "CancelOrder(address,address,uint256)": EventFragment;
    "CancelSellToken(address,uint256)": EventFragment;
    "FeeAddressTransferred(address,address)": EventFragment;
    "NewOrder(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetMakerFeePercent(address,uint256,uint256)": EventFragment;
    "SetTakerFeeFeePercent(address,uint256,uint256)": EventFragment;
    "Trade(address,address,uint256,bool,string,uint256,uint256,uint256)": EventFragment;
    "setPrices(address,uint256,uint256,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Ask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSellToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeAddressTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMakerFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTakerFeeFeePercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setPrices"): EventFragment;
}

export type AskEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    ([string, BigNumber] & { symbol: string; price: BigNumber })[],
    BigNumber
  ] & {
    seller: string;
    order: BigNumber;
    NFTAddress: string;
    ethPrice: BigNumber;
    tokenPrices: ([string, BigNumber] & { symbol: string; price: BigNumber })[];
    fee: BigNumber;
  }
>;

export type BuyEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    seller: string;
    buyer: string;
    nftAddress: string;
    order_: BigNumber;
    deltaQuantity: BigNumber;
  }
>;

export type CancelOrderEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    nftAddress: string;
    order_: BigNumber;
  }
>;

export type CancelSellTokenEvent = TypedEvent<
  [string, BigNumber] & { seller: string; order: BigNumber }
>;

export type FeeAddressTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type NewOrderEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    seller: string;
    nftAddress: string;
    order_: BigNumber;
    _quantity: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetMakerFeePercentEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    setBy: string;
    oldFeePercent: BigNumber;
    newFeePercent: BigNumber;
  }
>;

export type SetTakerFeeFeePercentEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    setBy: string;
    oldFeePercent: BigNumber;
    newFeePercent: BigNumber;
  }
>;

export type TradeEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    seller: string;
    buyer: string;
    tokenId: BigNumber;
    byToken: boolean;
    symbol: string;
    quantity: BigNumber;
    price: BigNumber;
    fee: BigNumber;
  }
>;

export type setPricesEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    ([string, BigNumber] & { symbol: string; price: BigNumber })[]
  ] & {
    seller: string;
    order: BigNumber;
    ethPrice: BigNumber;
    tokenPrices: ([string, BigNumber] & { symbol: string; price: BigNumber })[];
  }
>;

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyToken(
      _order: BigNumberish,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSellToken(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeAddr(overrides?: CallOverrides): Promise<[string]>;

    getAskLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAsks(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          string,
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          quantity: BigNumber;
          NFTAddress: string;
          tokenID: BigNumber[];
          currentIndex: BigNumber;
          ethPrice: BigNumber;
          tokenPrices: BigNumber;
          orderId: BigNumber;
        })[]
      ]
    >;

    getAsksByUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          string,
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          quantity: BigNumber;
          NFTAddress: string;
          tokenID: BigNumber[];
          currentIndex: BigNumber;
          ethPrice: BigNumber;
          tokenPrices: BigNumber;
          orderId: BigNumber;
        })[]
      ]
    >;

    getOrder(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          string,
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          quantity: BigNumber;
          NFTAddress: string;
          tokenID: BigNumber[];
          currentIndex: BigNumber;
          ethPrice: BigNumber;
          tokenPrices: BigNumber;
          orderId: BigNumber;
        }
      ]
    >;

    getOrderByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          string,
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          owner: string;
          quantity: BigNumber;
          NFTAddress: string;
          tokenID: BigNumber[];
          currentIndex: BigNumber;
          ethPrice: BigNumber;
          tokenPrices: BigNumber;
          orderId: BigNumber;
        }
      ]
    >;

    makerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    readyToSellToken(
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      ethPrice: BigNumberish,
      _prices: BigNumberish,
      nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMakerFee(
      makerFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTakerFee(
      takerFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  buyToken(
    _order: BigNumberish,
    _quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSellToken(
    _order: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeAddr(overrides?: CallOverrides): Promise<string>;

  getAskLength(overrides?: CallOverrides): Promise<BigNumber>;

  getAsks(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      string,
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      quantity: BigNumber;
      NFTAddress: string;
      tokenID: BigNumber[];
      currentIndex: BigNumber;
      ethPrice: BigNumber;
      tokenPrices: BigNumber;
      orderId: BigNumber;
    })[]
  >;

  getAsksByUser(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      string,
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      quantity: BigNumber;
      NFTAddress: string;
      tokenID: BigNumber[];
      currentIndex: BigNumber;
      ethPrice: BigNumber;
      tokenPrices: BigNumber;
      orderId: BigNumber;
    })[]
  >;

  getOrder(
    _order: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      quantity: BigNumber;
      NFTAddress: string;
      tokenID: BigNumber[];
      currentIndex: BigNumber;
      ethPrice: BigNumber;
      tokenPrices: BigNumber;
      orderId: BigNumber;
    }
  >;

  getOrderByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      owner: string;
      quantity: BigNumber;
      NFTAddress: string;
      tokenID: BigNumber[];
      currentIndex: BigNumber;
      ethPrice: BigNumber;
      tokenPrices: BigNumber;
      orderId: BigNumber;
    }
  >;

  makerFee(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  readyToSellToken(
    _tokenIds: BigNumberish[],
    _quantity: BigNumberish,
    ethPrice: BigNumberish,
    _prices: BigNumberish,
    nft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMakerFee(
    makerFee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTakerFee(
    takerFee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takerFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(
      _order: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSellToken(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAddr(overrides?: CallOverrides): Promise<string>;

    getAskLength(overrides?: CallOverrides): Promise<BigNumber>;

    getAsks(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        owner: string;
        quantity: BigNumber;
        NFTAddress: string;
        tokenID: BigNumber[];
        currentIndex: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: BigNumber;
        orderId: BigNumber;
      })[]
    >;

    getAsksByUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        owner: string;
        quantity: BigNumber;
        NFTAddress: string;
        tokenID: BigNumber[];
        currentIndex: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: BigNumber;
        orderId: BigNumber;
      })[]
    >;

    getOrder(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        owner: string;
        quantity: BigNumber;
        NFTAddress: string;
        tokenID: BigNumber[];
        currentIndex: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: BigNumber;
        orderId: BigNumber;
      }
    >;

    getOrderByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        owner: string;
        quantity: BigNumber;
        NFTAddress: string;
        tokenID: BigNumber[];
        currentIndex: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: BigNumber;
        orderId: BigNumber;
      }
    >;

    makerFee(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    readyToSellToken(
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      ethPrice: BigNumberish,
      _prices: BigNumberish,
      nft: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMakerFee(
      makerFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTakerFee(
      takerFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Ask(address,uint256,address,uint256,tuple[],uint256)"(
      seller?: null,
      order?: null,
      NFTAddress?: null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[],
        BigNumber
      ],
      {
        seller: string;
        order: BigNumber;
        NFTAddress: string;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
        fee: BigNumber;
      }
    >;

    Ask(
      seller?: null,
      order?: null,
      NFTAddress?: null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[],
        BigNumber
      ],
      {
        seller: string;
        order: BigNumber;
        NFTAddress: string;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
        fee: BigNumber;
      }
    >;

    "Buy(address,address,address,uint256,uint256)"(
      seller?: null,
      buyer?: null,
      nftAddress?: null,
      order_?: null,
      deltaQuantity?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        seller: string;
        buyer: string;
        nftAddress: string;
        order_: BigNumber;
        deltaQuantity: BigNumber;
      }
    >;

    Buy(
      seller?: null,
      buyer?: null,
      nftAddress?: null,
      order_?: null,
      deltaQuantity?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        seller: string;
        buyer: string;
        nftAddress: string;
        order_: BigNumber;
        deltaQuantity: BigNumber;
      }
    >;

    "CancelOrder(address,address,uint256)"(
      seller?: null,
      nftAddress?: null,
      order_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; nftAddress: string; order_: BigNumber }
    >;

    CancelOrder(
      seller?: null,
      nftAddress?: null,
      order_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; nftAddress: string; order_: BigNumber }
    >;

    "CancelSellToken(address,uint256)"(
      seller?: string | null,
      order?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; order: BigNumber }
    >;

    CancelSellToken(
      seller?: string | null,
      order?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { seller: string; order: BigNumber }
    >;

    "FeeAddressTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    FeeAddressTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "NewOrder(address,address,uint256,uint256)"(
      seller?: null,
      nftAddress?: null,
      order_?: null,
      _quantity?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        seller: string;
        nftAddress: string;
        order_: BigNumber;
        _quantity: BigNumber;
      }
    >;

    NewOrder(
      seller?: null,
      nftAddress?: null,
      order_?: null,
      _quantity?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        seller: string;
        nftAddress: string;
        order_: BigNumber;
        _quantity: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetMakerFeePercent(address,uint256,uint256)"(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    SetMakerFeePercent(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    "SetTakerFeeFeePercent(address,uint256,uint256)"(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    SetTakerFeeFeePercent(
      setBy?: string | null,
      oldFeePercent?: null,
      newFeePercent?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { setBy: string; oldFeePercent: BigNumber; newFeePercent: BigNumber }
    >;

    "Trade(address,address,uint256,bool,string,uint256,uint256,uint256)"(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: null,
      byToken?: null,
      symbol?: null,
      quantity?: null,
      price?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        seller: string;
        buyer: string;
        tokenId: BigNumber;
        byToken: boolean;
        symbol: string;
        quantity: BigNumber;
        price: BigNumber;
        fee: BigNumber;
      }
    >;

    Trade(
      seller?: string | null,
      buyer?: string | null,
      tokenId?: null,
      byToken?: null,
      symbol?: null,
      quantity?: null,
      price?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        seller: string;
        buyer: string;
        tokenId: BigNumber;
        byToken: boolean;
        symbol: string;
        quantity: BigNumber;
        price: BigNumber;
        fee: BigNumber;
      }
    >;

    "setPrices(address,uint256,uint256,tuple[])"(
      seller?: string | null,
      order?: BigNumberish | null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[]
      ],
      {
        seller: string;
        order: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
      }
    >;

    setPrices(
      seller?: string | null,
      order?: BigNumberish | null,
      ethPrice?: null,
      tokenPrices?: { symbol: string; price: BigNumberish }[] | null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        ([string, BigNumber] & { symbol: string; price: BigNumber })[]
      ],
      {
        seller: string;
        order: BigNumber;
        ethPrice: BigNumber;
        tokenPrices: ([string, BigNumber] & {
          symbol: string;
          price: BigNumber;
        })[];
      }
    >;
  };

  estimateGas: {
    PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(
      _order: BigNumberish,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSellToken(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getAskLength(overrides?: CallOverrides): Promise<BigNumber>;

    getAsks(overrides?: CallOverrides): Promise<BigNumber>;

    getAsksByUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOrder(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerFee(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    readyToSellToken(
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      ethPrice: BigNumberish,
      _prices: BigNumberish,
      nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMakerFee(
      makerFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTakerFee(
      takerFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takerFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERCENTS_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyToken(
      _order: BigNumberish,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSellToken(
      _order: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAskLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsksByUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      _order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readyToSellToken(
      _tokenIds: BigNumberish[],
      _quantity: BigNumberish,
      ethPrice: BigNumberish,
      _prices: BigNumberish,
      nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMakerFee(
      makerFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTakerFee(
      takerFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
